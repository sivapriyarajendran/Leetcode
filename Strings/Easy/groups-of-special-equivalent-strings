class Solution {
    public int numSpecialEquivGroups(String[] A) {
        HashSet<String> groups= new HashSet();
        
        for(String s: A){
            groups.add(getCodeOptimized(s));
        }
        
        return groups.size();     
    }
    
    public String getCodeOptimized(String s) {
        char[] odd = new char[26];
        char[] even = new char[26];
        char[] ch = s.toCharArray();
        for (int i = 0; i < ch.length; i++) {
            int index = ch[i] - 'a';
            if (i % 2 == 0) {
                even[index]++;
            } else {
                odd[index]++;
            }
        }
        StringBuilder sb = new StringBuilder();
        sb.append(odd);
        sb.append("_");
        sb.append(even);
        return sb.toString();
    }
}
